import socket
import random
import ClientBase
from ClientBase import *
#import scipy
from scipy.stats import norm
import statistics
import random
import matplotlib.pyplot as plt
#import numpy as np

#import PokerGame
#from PokerGame import infoAgent
# identify if there is one or more pairs in the hand
from typing import Dict, List, Any, Union



# IP address and port
TCP_IP = '127.0.0.1'
TCP_PORT = 5000
BUFFER_SIZE = 1024

# Agent
POKER_CLIENT_NAME = 'MEMORY'
CURRENT_HAND = []
# CURRENT_HAND_TYPE = 0
Ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']

Suits = ['s', 'h', 'd', 'c']
        # SPADE  HEART DIAMOND CLUB

COMBOS = ['High Card', 'Pair', '2 Pairs',  '3 of a kind',
          'Straight', 'Flush', 'Full House', '4 of a kind', 'Straight Flush' ]

# init a priori probabilities by hand type
#hand_probabilities = [0.5012, 0.4226 , 0.0475 , 0.021 , 0.0039 , 0.002 , 0.0014 , 0.00024 , 0.00015]
hand_probabilities = [0.4975396391470749, 0.43685073810825586, 0.038819026790595956, 0.020229633679606344, 0.004373974849644614, 0.0016402405686167304, 0.0005467468562055768, 0.0, 0.0]

N_HANDS = 2598960

#n_hands = 2598960

n_hands = 0

# nb of hands you can still expect per type
#n_hands_type = [1302540 , 1098240 , 123552, 54912, 10240, 5148, 3744, 624, 40]

n_hands_type = 9*[0]
# TOTAL NB OF CHIPS IN THE POT
POT = 0
# Amount of chips required to call
MIN_TO_CALL = 0
ANTE = 10

# sorted strengths
n_hand_strength = 1048
hand_strength_samples = [152113, 152126, 178308, 180687, 182871, 209235, 209248, 211445, 211446, 211615, 211629, 213460, 213642, 213981, 213993, 213994, 213995, 214008, 235430, 240162, 240176, 240189, 242021, 242203, 242359, 242372, 242528, 242541, 242555, 242569, 242570, 244556, 244584, 244934, 244936, 244947, 244949, 263991, 268554, 268567, 268568, 268736, 268749, 268751, 270765, 270920, 270948, 271089, 271116, 271117, 271129, 271131, 273130, 273143, 273144, 273299, 273300, 273312, 273313, 273314, 273455, 273468, 273481, 273494, 273496, 273497, 273507, 273508, 273510, 275341, 275510, 275522, 275525, 275692, 275694, 275706, 275834, 275873, 275877, 275889, 294918, 297298, 299325, 299326, 299481, 299494, 299495, 299689, 299691, 299692, 301523, 301704, 301873, 301874, 301875, 301887, 301888, 301889, 302016, 302029, 302042, 302056, 302058, 302068, 302070, 303719, 303889, 304072, 304083, 304084, 304086, 304227, 304241, 304255, 304266, 304268, 304408, 304421, 304422, 304423, 304424, 304436, 304437, 304438, 304447, 304450, 304451, 305734, 306072, 306085, 306098, 306099, 306100, 306254, 306255, 306269, 306280, 306410, 306436, 306437, 306449, 306450, 306462, 306464, 306579, 306592, 306593, 306607, 306619, 306633, 306635, 306647, 306649, 306748, 306776, 306788, 306802, 306803, 306814, 306815, 306818, 306828, 306829, 306831, 323479, 323492, 325676, 325845, 325859, 327704, 327886, 327887, 328056, 328069, 328225, 328238, 328251, 328252, 328253, 329901, 330252, 330253, 330265, 330421, 330448, 330449, 330450, 330590, 330591, 330603, 330604, 330617, 330632, 332098, 332436, 332449, 332605, 332618, 332619, 332645, 332646, 332647, 332801, 332802, 332827, 332829, 332943, 332956, 332969, 332982, 332985, 332995, 332996, 332998, 333011, 333012, 334464, 334633, 334647, 334661, 334802, 334816, 334829, 334984, 334998, 335010, 335013, 335023, 335024, 335153, 335192, 335195, 335196, 335206, 335309, 335323, 335336, 335351, 335363, 335364, 335365, 335374, 335376, 335387, 335393, 336674, 336675, 336830, 336858, 337025, 337026, 337039, 337181, 337182, 337196, 337209, 337210, 337220, 337222, 337224, 337350, 337363, 337364, 337365, 337379, 337390, 337392, 337393, 337519, 337547, 337561, 337562, 337571, 337573, 337588, 337688, 337689, 337716, 337717, 337728, 337731, 337743, 337753, 337754, 337755, 337757, 337758, 337759, 337768, 337769, 337771, 354068, 354251, 354406, 354419, 354434, 356265, 356616, 356629, 356785, 356798, 356800, 356811, 356812, 356814, 358631, 358645, 358828, 358969, 358982, 358983, 358995, 358997, 359008, 359151, 359152, 359165, 359166, 359177, 359190, 359191, 359192, 360842, 361023, 361024, 361180, 361206, 361348, 361349, 361375, 361377, 361387, 361504, 361518, 361532, 361545, 361556, 361558, 361560, 361574, 363039, 363363, 363377, 363403, 363572, 363573, 363701, 363714, 363729, 363740, 363741, 363743, 363753, 363754, 363757, 363767, 363769, 363896, 363909, 363924, 363935, 363936, 363938, 363940, 363948, 363949, 363951, 363953, 365222, 365235, 365419, 365600, 365755, 365757, 365771, 365783, 365924, 365926, 365937, 365939, 365940, 365950, 365953, 365965, 365966, 365967, 365968, 366109, 366119, 366120, 366121, 366122, 366132, 366137, 366147, 366151, 366275, 366278, 366301, 366305, 366315, 366317, 366318, 366319, 366328, 366329, 366330, 366332, 366333, 367433, 367588, 367601, 367614, 367616, 367757, 367771, 367783, 367797, 367798, 367799, 367939, 367940, 367954, 367966, 367980, 368095, 368123, 368134, 368136, 368150, 368160, 368161, 368162, 368264, 368290, 368303, 368304, 368316, 368317, 368319, 368320, 368330, 368333, 368342, 368344, 368347, 368447, 368460, 368461, 368472, 368485, 368489, 368498, 368501, 368502, 368513, 368515, 368516, 368524, 368528, 368529, 368530, 368531, 368642, 368655, 368667, 368668, 368672, 368680, 368682, 368684, 368685, 368686, 368696, 368697, 368698, 368699, 368707, 368708, 368709, 368710, 368711, 368712, 490113, 492297, 492492, 492661, 494858, 523238, 523421, 523589, 525434, 525616, 525772, 547235, 549783, 551799, 551812, 551954, 553813, 554151, 554375, 556530, 556543, 556712, 556713, 556726, 556740, 577993, 578331, 578345, 580177, 580556, 582753, 582935, 583089, 584767, 585078, 585261, 585289, 585313, 585315, 585455, 585456, 587471, 587497, 587640, 587654, 587668, 587681, 608751, 609284, 611496, 611497, 611638, 611664, 611666, 613498, 613850, 613874, 614030, 614031, 614042, 614045, 615329, 615342, 615498, 615850, 615890, 616174, 616252, 616256, 618074, 618410, 618411, 618426, 618567, 618580, 618593, 618595, 639665, 640055, 640185, 642214, 642253, 642369, 642434, 642436, 642551, 642565, 642591, 642606, 642607, 644256, 644397, 644411, 644635, 644930, 644931, 644956, 644970, 644986, 646466, 647010, 647192, 647310, 647325, 647350, 647351, 647365, 647367, 648466, 648635, 648649, 648804, 648832, 648986, 648987, 649013, 649014, 649142, 649195, 649197, 649324, 649338, 649367, 649480, 649558, 649561, 663846, 666237, 666394, 666406, 668057, 668070, 668435, 668606, 668616, 668746, 668772, 668773, 670254, 670775, 670814, 670815, 670816, 670972, 670995, 671112, 672828, 673012, 673013, 673296, 673533, 673534, 673545, 673546, 674817, 674831, 675014, 675025, 675507, 675676, 675718, 675753, 675755, 675872, 675926, 676845, 677041, 677183, 677222, 677352, 677549, 677769, 677873, 677915, 678028, 678135, 678139, 678223, 678237, 678291, 679576, 679590, 679744, 679758, 679770, 679928, 679942, 679953, 680125, 680139, 680252, 680264, 680290, 680291, 680294, 680319, 680320, 680420, 680463, 680473, 680475, 680477, 680486, 680488, 680499, 680503, 690209, 692393, 692589, 694968, 694969, 696995, 697167, 697321, 697349, 698828, 698998, 699714, 701012, 701390, 701391, 701533, 701702, 701730, 701744, 701757, 701939, 702078, 702107, 702108, 703209, 703404, 703575, 703586, 703587, 703758, 703768, 703951, 703954, 704068, 704133, 704134, 704293, 704314, 704459, 704471, 704483, 704487, 704488, 705419, 705785, 705927, 705966, 706149, 706265, 706279, 706448, 706511, 706513, 706589, 706687, 706771, 706785, 706798, 706825, 706840, 706862, 707772, 707786, 707798, 708110, 708124, 708163, 708293, 708344, 708476, 708529, 708617, 708687, 708701, 708786, 708814, 708842, 708884, 708894, 708895, 709079, 709179, 709190, 709203, 709228, 709233, 709234, 709235, 709245, 710346, 710515, 710699, 710700, 710840, 711050, 711064, 711076, 711080, 711165, 711231, 711232, 711243, 711248, 711373, 711389, 711390, 711399, 711403, 711414, 711418, 723320, 725348, 725714, 725910, 727742, 727897, 728052, 728066, 728121, 728274, 728275, 728288, 728290, 729586, 729768, 729951, 730291, 730418, 730446, 730460, 730488, 730497, 730639, 730669, 731939, 732136, 732319, 732515, 732685, 732840, 732877, 732880, 732994, 733007, 733045, 734854, 735178, 735206, 735256, 735371, 735374, 735400, 735402, 735410, 735415, 736177, 736347, 736516, 736543, 736723, 737088, 737269, 737272, 737417, 737453, 737572, 737586, 737628, 737633, 737711, 737737, 737767, 737776, 737778, 737789, 737791, 737793, 737802, 737804, 737805, 738361, 738374, 738738, 738739, 738921, 739037, 739051, 739103, 739466, 739468, 739572, 739586, 739600, 739755, 739783, 739830, 739835, 739896, 739924, 740016, 740092, 740130, 740131, 740148, 740162, 740185, 741078, 741105, 741247, 741275, 741288, 741456, 741612, 741654, 741782, 741820, 741837, 741937, 741950, 741976, 741977, 741979, 742119, 742132, 742300, 742315, 742316, 742383, 742387, 835198, 865787, 865956, 897094, 897104, 927863, 954357, 956737, 958061, 958230, 958568, 958737, 958803, 958806, 978172, 989664, 989744, 1019956, 1020098, 1020869, 1032942, 1042392, 1044758, 1050842, 1051349, 1051518, 1051624, 1073333, 1073347, 1073361, 1075755, 1078079, 1080501, 1081470, 1081600, 1081994, 1082199, 1082332, 1082726, 1094824, 1101964, 1106612, 1111414, 1112527, 1112592, 1112593, 1113386, 1113555, 1113685, 1113693, 1297144, 1299493, 1299510, 1318383, 1318565, 1320763, 1328080, 1330420, 1330449, 1346761, 1349324, 1355549, 1356098, 1358844, 1382824, 1385207, 1389965, 1389966, 1392289, 1392291, 1392330, 1392331, 1416145, 1432627, 1447084, 1449466, 1466130, 1468507, 1470887, 1472356, 1473264, 1473266, 1475643, 1478022, 1480401, 1482782, 1482783, 1485055, 1485056, 1606358, 1699181, 1730122, 1822945, 1834846, 1853886, 2162734, 2215265, 2224976, 2320398, 2506101, 2506213, 2567983]


hand_strength_cdf = [0.0014204545454545455, 0.002130681818181818, 0.002840909090909091, 0.0035511363636363635, 0.004261363636363636, 0.00497159090909091, 0.006392045454545454, 0.007102272727272727, 0.008522727272727272, 0.009232954545454544, 0.009943181818181818, 0.01065340909090909, 0.011363636363636364, 0.012073863636363636, 0.01349431818181818, 0.014204545454545452, 0.014914772727272726, 0.015624999999999997, 0.01633522727272727, 0.017755681818181813, 0.01846590909090909, 0.01988636363636363, 0.0205965909090909, 0.021306818181818173, 0.022017045454545445, 0.022727272727272717, 0.02343749999999999, 0.025568181818181806, 0.02627840909090908, 0.026988636363636354, 0.029829545454545442, 0.030539772727272714, 0.031249999999999986, 0.03196022727272726, 0.03267045454545453, 0.03480113636363635, 0.03551136363636362, 0.03622159090909089, 0.03693181818181816, 0.037642045454545435, 0.03835227272727271, 0.039062499999999986, 0.03977272727272726, 0.04048295454545453, 0.0411931818181818, 0.041903409090909075, 0.04332386363636362, 0.04474431818181816, 0.045454545454545435, 0.04687499999999998, 0.04758522727272725, 0.049005681818181795, 0.05042613636363634, 0.05113636363636361, 0.051846590909090884, 0.05326704545454543, 0.0539772727272727, 0.055397727272727244, 0.056107954545454516, 0.05752840909090906, 0.05823863636363633, 0.058948863636363605, 0.06036931818181815, 0.06107954545454542, 0.06178977272727269, 0.06321022727272724, 0.06392045454545452, 0.0646306818181818, 0.06605113636363635, 0.0674715909090909, 0.06889204545454546, 0.06960227272727273, 0.0703125, 0.07102272727272728, 0.07244318181818184, 0.07315340909090912, 0.0738636363636364, 0.07528409090909094, 0.0759943181818182, 0.07670454545454548, 0.07741477272727276, 0.0788352272727273, 0.07954545454545459, 0.08025568181818186, 0.08238636363636369, 0.08380681818181823, 0.08522727272727278, 0.08593750000000006, 0.08664772727272733, 0.08735795454545461, 0.08806818181818189, 0.08877840909090917, 0.09019886363636373, 0.09090909090909101, 0.09161931818181829, 0.09232954545454557, 0.09303977272727285, 0.09375000000000012, 0.09588068181818195, 0.09659090909090923, 0.09801136363636377, 0.09872159090909105, 0.09943181818181833, 0.10085227272727289, 0.10156250000000017, 0.10298295454545471, 0.10369318181818199, 0.10511363636363655, 0.10582386363636383, 0.10724431818181837, 0.10795454545454565, 0.1093750000000002, 0.11008522727272747, 0.11079545454545474, 0.11150568181818202, 0.11221590909090928, 0.11363636363636384, 0.11434659090909112, 0.1150568181818184, 0.11576704545454568, 0.1178977272727275, 0.11860795454545478, 0.11931818181818206, 0.12215909090909115, 0.12357954545454569, 0.12428977272727296, 0.1257102272727275, 0.12713068181818202, 0.12855113636363655, 0.1299715909090911, 0.13068181818181837, 0.13139204545454564, 0.13281250000000017, 0.13423295454545472, 0.13565340909090925, 0.13636363636363652, 0.13707386363636379, 0.13778409090909105, 0.1392045454545456, 0.1399147727272729, 0.1406250000000002, 0.14133522727272746, 0.14204545454545472, 0.14275568181818202, 0.14346590909090928, 0.14630681818181837, 0.14701704545454564, 0.14843750000000017, 0.1498579545454547, 0.150568181818182, 0.15127840909090925, 0.15198863636363655, 0.15269886363636384, 0.1534090909090911, 0.15625000000000014, 0.1569602272727274, 0.15767045454545467, 0.15838068181818193, 0.16051136363636373, 0.161221590909091, 0.1619318181818183, 0.16264204545454555, 0.16477272727272735, 0.1661931818181819, 0.16690340909090917, 0.16761363636363644, 0.1683238636363637, 0.16903409090909097, 0.1711647727272728, 0.17258522727272732, 0.17400568181818188, 0.1761363636363637, 0.17755681818181826, 0.1789772727272728, 0.17968750000000006, 0.18039772727272732, 0.18110795454545459, 0.18181818181818185, 0.18323863636363638, 0.18394886363636365, 0.1846590909090909, 0.18536931818181818, 0.18607954545454544, 0.1875, 0.18963068181818185, 0.19176136363636365, 0.1924715909090909, 0.19318181818181818, 0.19460227272727273, 0.1960227272727273, 0.19744318181818185, 0.19886363636363638, 0.19957386363636367, 0.20099431818181823, 0.2017045454545455, 0.20241477272727276, 0.20312500000000003, 0.20454545454545459, 0.20596590909090912, 0.20738636363636367, 0.2088068181818182, 0.20951704545454547, 0.21093750000000003, 0.21306818181818185, 0.21377840909090912, 0.21448863636363638, 0.21519886363636365, 0.2159090909090909, 0.21661931818181818, 0.2180397727272727, 0.21874999999999997, 0.21946022727272724, 0.22017045454545453, 0.2208806818181818, 0.22230113636363635, 0.2237215909090909, 0.22443181818181818, 0.22585227272727273, 0.22798295454545459, 0.22869318181818185, 0.23011363636363638, 0.23082386363636365, 0.2315340909090909, 0.23224431818181818, 0.23366477272727273, 0.234375, 0.23508522727272727, 0.23579545454545453, 0.2365056818181818, 0.23792613636363635, 0.2400568181818182, 0.2407670454545455, 0.24289772727272732, 0.24360795454545459, 0.24431818181818185, 0.24644886363636365, 0.2471590909090909, 0.24857954545454544, 0.2492897727272727, 0.24999999999999997, 0.25071022727272724, 0.25142045454545453, 0.25284090909090906, 0.25355113636363635, 0.2556818181818182, 0.2563920454545454, 0.2571022727272727, 0.2578125, 0.2592329545454546, 0.2599431818181818, 0.2606534090909091, 0.2620738636363637, 0.262784090909091, 0.26349431818181834, 0.264914772727273, 0.26633522727272757, 0.26775568181818205, 0.26846590909090934, 0.26988636363636387, 0.27059659090909116, 0.27130681818181845, 0.27201704545454575, 0.272727272727273, 0.2741477272727275, 0.27698863636363663, 0.27769886363636387, 0.27840909090909116, 0.27982954545454575, 0.28053977272727304, 0.2819602272727276, 0.28409090909090945, 0.2848011363636367, 0.285511363636364, 0.2862215909090913, 0.2869318181818185, 0.2876420454545458, 0.2890625000000004, 0.2897727272727277, 0.2904829545454549, 0.2911931818181822, 0.29190340909090945, 0.29261363636363674, 0.293323863636364, 0.2940340909090913, 0.2954545454545459, 0.29687500000000044, 0.298295454545455, 0.3004261363636368, 0.30184659090909144, 0.30255681818181873, 0.30326704545454597, 0.3046875000000005, 0.3053977272727278, 0.3061079545454551, 0.3075284090909097, 0.308238636363637, 0.30894886363636426, 0.30965909090909155, 0.31107954545454614, 0.31178977272727343, 0.31250000000000067, 0.3139204545454552, 0.3146306818181825, 0.3153409090909098, 0.3160511363636371, 0.31676136363636437, 0.31747159090909166, 0.31818181818181895, 0.31889204545454625, 0.31960227272727354, 0.32031250000000083, 0.3224431818181827, 0.32315340909091006, 0.32386363636363735, 0.32599431818181923, 0.3267045454545465, 0.3274147727272738, 0.3281250000000011, 0.3288352272727284, 0.32954545454545564, 0.33025568181818293, 0.3309659090909102, 0.3316761363636375, 0.33238636363636476, 0.3330965909090921, 0.3345170454545467, 0.335227272727274, 0.3359375000000013, 0.3380681818181831, 0.3387784090909104, 0.3394886363636377, 0.3409090909090922, 0.34232954545454675, 0.3437500000000013, 0.34446022727272857, 0.3451704545454558, 0.3458806818181831, 0.3465909090909104, 0.3473011363636377, 0.34872159090909227, 0.34943181818181956, 0.3508522727272741, 0.352982954545456, 0.35369318181818327, 0.35440340909091056, 0.3565340909090924, 0.3572443181818197, 0.3579545454545469, 0.35937500000000144, 0.3600852272727288, 0.3607954545454561, 0.3615056818181834, 0.3629261363636379, 0.36363636363636515, 0.36434659090909244, 0.36576704545454697, 0.3671875000000015, 0.3678977272727288, 0.3693181818181833, 0.3707386363636379, 0.3714488636363652, 0.37215909090909244, 0.3728693181818197, 0.37357954545454697, 0.37428977272727426, 0.37500000000000155, 0.37571022727272885, 0.37713068181818343, 0.37784090909091067, 0.37855113636363796, 0.3792613636363652, 0.381392045454547, 0.3821022727272743, 0.38423295454545614, 0.38494318181818343, 0.3856534090909107, 0.38707386363636526, 0.3899147727272744, 0.3906250000000016, 0.3913352272727289, 0.3934659090909108, 0.39488636363636526, 0.39559659090909255, 0.39630681818181984, 0.3970170454545471, 0.3977272727272744, 0.3998579545454562, 0.4005681818181835, 0.4012784090909108, 0.4019886363636381, 0.40269886363636537, 0.40340909090909266, 0.40482954545454725, 0.40625000000000183, 0.4069602272727291, 0.40838068181818366, 0.40909090909091095, 0.40980113636363824, 0.41051136363636553, 0.41122159090909277, 0.41193181818182006, 0.4133522727272746, 0.4147727272727291, 0.4154829545454564, 0.4161931818181837, 0.41761363636363824, 0.4190340909090928, 0.4197443181818201, 0.42187500000000194, 0.4240056818181837, 0.424715909090911, 0.42542613636363824, 0.42684659090909277, 0.4282670454545473, 0.4296875000000019, 0.4311079545454564, 0.4318181818181837, 0.4332386363636383, 0.4346590909090928, 0.43607954545454747, 0.43678977272727476, 0.437500000000002, 0.4382102272727293, 0.43892045454545653, 0.4396306818181838, 0.4403409090909111, 0.44176136363636564, 0.4431818181818202, 0.445312500000002, 0.44673295454545653, 0.44815340909091117, 0.4509943181818203, 0.4524147727272748, 0.45383522727272935, 0.45454545454545664, 0.4559659090909112, 0.4566761363636385, 0.4573863636363658, 0.4580965909090931, 0.4588068181818204, 0.4595170454545477, 0.460227272727275, 0.4609375000000023, 0.46164772727272957, 0.4623579545454568, 0.4630681818181841, 0.46448863636363863, 0.46661931818182045, 0.468039772727275, 0.46946022727272957, 0.4701704545454568, 0.4723011363636387, 0.473011363636366, 0.47372159090909327, 0.4751420454545478, 0.4758522727272751, 0.4772727272727297, 0.477982954545457, 0.47869318181818427, 0.4801136363636388, 0.4808238636363661, 0.4822443181818206, 0.48366477272727515, 0.48437500000000244, 0.485795454545457, 0.48650568181818427, 0.48721590909091156, 0.48792613636363885, 0.48863636363636614, 0.48934659090909344, 0.49005681818182073, 0.49218750000000255, 0.49289772727272985, 0.4943181818181844, 0.49502840909091167, 0.49573863636363896, 0.49715909090909355, 0.49857954545454813, 0.49928977272727537, 0.5035511363636391, 0.5049715909090937, 0.505681818181821, 0.5071022727272756, 0.5085227272727302, 0.5092329545454575, 0.5099431818181848, 0.5113636363636392, 0.5120738636363665, 0.5127840909090938, 0.5142045454545483, 0.5149147727272757, 0.515625000000003, 0.5170454545454576, 0.5177556818181849, 0.5184659090909122, 0.5191761363636395, 0.5205965909090939, 0.5213068181818212, 0.5227272727272758, 0.5241477272727304, 0.5248579545454577, 0.525568181818185, 0.5262784090909123, 0.5276988636363669, 0.5291193181818213, 0.5298295454545486, 0.5305397727272759, 0.5312500000000032, 0.5326704545454578, 0.5333806818181851, 0.5340909090909124, 0.5348011363636397, 0.5362215909090943, 0.5376420454545489, 0.5383522727272761, 0.5390625000000034, 0.5397727272727307, 0.5411931818181853, 0.5419034090909126, 0.5447443181818217, 0.545454545454549, 0.5461647727272763, 0.5468750000000036, 0.5475852272727308, 0.5482954545454581, 0.5490056818181854, 0.5497159090909127, 0.55042613636364, 0.5511363636363673, 0.5518465909090946, 0.5525568181818219, 0.5532670454545491, 0.5539772727272764, 0.5553977272727311, 0.5561079545454582, 0.5568181818181855, 0.5575284090909128, 0.5582386363636402, 0.5589488636363675, 0.5596590909090948, 0.5603693181818221, 0.5617897727272767, 0.5632102272727313, 0.5639204545454586, 0.5653409090909132, 0.5667613636363678, 0.567471590909095, 0.5681818181818223, 0.5696022727272769, 0.5703125000000042, 0.5710227272727315, 0.5724431818181861, 0.5731534090909134, 0.5738636363636407, 0.574573863636368, 0.5759943181818226, 0.5767045454545499, 0.577414772727277, 0.5781250000000044, 0.5795454545454589, 0.5802556818181863, 0.5816761363636409, 0.5823863636363682, 0.5838068181818227, 0.58451704545455, 0.5852272727272773, 0.5866477272727318, 0.5873579545454591, 0.589488636363641, 0.5909090909090955, 0.5923295454545501, 0.5937500000000047, 0.594460227272732, 0.5951704545454592, 0.5965909090909138, 0.5973011363636411, 0.5980113636363684, 0.5987215909090957, 0.5994318181818229, 0.6008522727272775, 0.6015625000000048, 0.6022727272727321, 0.6029829545454595, 0.604403409090914, 0.6051136363636413, 0.6065340909090959, 0.6072443181818232, 0.6079545454545505, 0.6086647727272778, 0.6093750000000051, 0.6100852272727324, 0.6107954545454597, 0.611505681818187, 0.6129261363636416, 0.6143465909090962, 0.6157670454545507, 0.6171875000000052, 0.6178977272727325, 0.6193181818181871, 0.6200284090909144, 0.6207386363636417, 0.621448863636369, 0.6221590909090963, 0.6228693181818237, 0.623579545454551, 0.6250000000000056, 0.6257102272727328, 0.6264204545454601, 0.6271306818181874, 0.628551136363642, 0.6299715909090966, 0.6306818181818239, 0.6313920454545512, 0.6321022727272785, 0.6328125000000058, 0.6335227272727331, 0.6342329545454604, 0.6349431818181877, 0.635653409090915, 0.6363636363636422, 0.6370738636363695, 0.6377840909090968, 0.6392045454545514, 0.6399147727272787, 0.6413352272727333, 0.6420454545454606, 0.6427556818181879, 0.6434659090909152, 0.6441761363636425, 0.645596590909097, 0.6463068181818243, 0.6470170454545516, 0.6477272727272789, 0.6484375000000062, 0.6491477272727335, 0.6498579545454608, 0.6505681818181881, 0.6512784090909154, 0.6519886363636427, 0.65269886363637, 0.6534090909090973, 0.6548295454545519, 0.6562500000000063, 0.6569602272727336, 0.6576704545454609, 0.6583806818181882, 0.6598011363636428, 0.6612215909090974, 0.6619318181818247, 0.662642045454552, 0.6633522727272793, 0.6640625000000066, 0.6647727272727338, 0.6661931818181884, 0.6669034090909157, 0.667613636363643, 0.6683238636363703, 0.6690340909090976, 0.6697443181818249, 0.6704545454545522, 0.6718750000000068, 0.6725852272727341, 0.6732954545454614, 0.6740056818181887, 0.6747159090909159, 0.6754261363636432, 0.6761363636363705, 0.6768465909090978, 0.6775568181818251, 0.6782670454545524, 0.6789772727272797, 0.679687500000007, 0.6811079545454615, 0.6818181818181888, 0.6825284090909162, 0.6832386363636435, 0.6846590909090979, 0.6853693181818253, 0.6875000000000072, 0.6882102272727345, 0.6896306818181891, 0.6910511363636437, 0.691761363636371, 0.6931818181818256, 0.6938920454545529, 0.6946022727272801, 0.6953125000000074, 0.6960227272727347, 0.6974431818181893, 0.6988636363636439, 0.7002840909090985, 0.7009943181818258, 0.7024147727272803, 0.7031250000000077, 0.703835227272735, 0.7045454545454622, 0.7052556818181895, 0.7059659090909168, 0.7066761363636441, 0.7073863636363714, 0.7080965909090987, 0.708806818181826, 0.7095170454545533, 0.7102272727272806, 0.7109375000000079, 0.7123579545454625, 0.7130681818181898, 0.713778409090917, 0.7151988636363716, 0.7159090909090988, 0.7166193181818261, 0.7173295454545534, 0.7180397727272807, 0.7194602272727353, 0.7201704545454625, 0.7208806818181898, 0.721590909090917, 0.7237215909090989, 0.7244318181818262, 0.7258522727272808, 0.7265625000000081, 0.7279829545454627, 0.7294034090909173, 0.7308238636363719, 0.7322443181818263, 0.7336647727272809, 0.7343750000000083, 0.7357954545454628, 0.7365056818181901, 0.7372159090909174, 0.7379261363636447, 0.738636363636372, 0.7393465909090993, 0.7407670454545539, 0.7414772727272811, 0.7428977272727357, 0.7443181818181902, 0.7450284090909175, 0.746448863636372, 0.7478693181818266, 0.7485795454545539, 0.7492897727272811, 0.7507102272727357, 0.751420454545463, 0.7528409090909176, 0.7542613636363722, 0.7556818181818268, 0.7563920454545541, 0.7585227272727358, 0.7599431818181904, 0.7606534090909177, 0.761363636363645, 0.7620738636363723, 0.7627840909090996, 0.7642045454545541, 0.7649147727272814, 0.766335227272736, 0.7670454545454634, 0.7677556818181906, 0.7684659090909179, 0.7698863636363725, 0.7705965909090998, 0.7713068181818271, 0.7720170454545544, 0.7727272727272817, 0.773437500000009, 0.7741477272727363, 0.7748579545454636, 0.7762784090909182, 0.7769886363636455, 0.7776988636363728, 0.7784090909091, 0.7791193181818274, 0.7798295454545547, 0.780539772727282, 0.7812500000000092, 0.7819602272727365, 0.7826704545454638, 0.7833806818181911, 0.7840909090909184, 0.7848011363636457, 0.7862215909091003, 0.7869318181818276, 0.7876420454545549, 0.7883522727272821, 0.7890625000000093, 0.7897727272727366, 0.7904829545454639, 0.7911931818181912, 0.7919034090909185, 0.7926136363636458, 0.7933238636363731, 0.7940340909091004, 0.7947443181818277, 0.795454545454555, 0.7961647727272823, 0.7968750000000095, 0.7975852272727368, 0.7982954545454641, 0.7990056818181915, 0.7997159090909188, 0.8004261363636461, 0.8011363636363734, 0.8018465909091007, 0.8032670454545553, 0.8039772727272826, 0.8046875000000099, 0.8053977272727372, 0.8061079545454645, 0.8068181818181918, 0.807528409090919, 0.8082386363636463, 0.8089488636363736, 0.8096590909091009, 0.8117897727272828, 0.8125000000000101, 0.8132102272727374, 0.8139204545454647, 0.814630681818192, 0.8153409090909193, 0.8160511363636466, 0.8167613636363739, 0.8181818181818284, 0.8188920454545556, 0.8203125000000102, 0.8210227272727375, 0.8231534090909194, 0.8238636363636467, 0.824573863636374, 0.8252840909091012, 0.8259943181818286, 0.8267045454545559, 0.8274147727272831, 0.8281250000000104, 0.8288352272727377, 0.829545454545465, 0.8302556818181923, 0.8323863636363742, 0.8330965909091015, 0.8345170454545561, 0.8352272727272834, 0.8359375000000105, 0.8373579545454651, 0.8380681818181924, 0.839488636363647, 0.8401988636363743, 0.8409090909091016, 0.8416193181818289, 0.8423295454545562, 0.8444602272727381, 0.8451704545454654, 0.8458806818181926, 0.8473011363636472, 0.8487215909091018, 0.8494318181818291, 0.8501420454545564, 0.8508522727272837, 0.851562500000011, 0.8522727272727383, 0.8536931818181929, 0.8544034090909202, 0.8558238636363747, 0.856534090909102, 0.8579545454545566, 0.8586647727272839, 0.8593750000000112, 0.8600852272727385, 0.8615056818181931, 0.8622159090909204, 0.8629261363636477, 0.863636363636375, 0.8643465909091023, 0.8657670454545568, 0.8664772727272841, 0.8671875000000114, 0.868607954545466, 0.8693181818181933, 0.8700284090909206, 0.8707386363636479, 0.8714488636363752, 0.8721590909091025, 0.8728693181818298, 0.8735795454545571, 0.8742897727272845, 0.8750000000000118, 0.8757102272727391, 0.8764204545454664, 0.8771306818181936, 0.8792613636363754, 0.8799715909091027, 0.88068181818183, 0.8813920454545573, 0.8828125000000119, 0.8842329545454666, 0.8849431818181939, 0.8856534090909212, 0.8863636363636485, 0.8870738636363757, 0.8884943181818303, 0.8892045454545576, 0.8899147727272849, 0.8913352272727395, 0.8920454545454668, 0.8927556818181941, 0.8934659090909214, 0.8955965909091032, 0.8970170454545577, 0.897727272727285, 0.8984375000000123, 0.8991477272727396, 0.8998579545454669, 0.9005681818181942, 0.9019886363636488, 0.9026988636363761, 0.9055397727272853, 0.9069602272727398, 0.9076704545454671, 0.9083806818181944, 0.9090909090909217, 0.909801136363649, 0.9105113636363764, 0.9112215909091036, 0.9119318181818309, 0.9126420454545582, 0.9140625000000129, 0.9147727272727402, 0.9161931818181948, 0.916903409090922, 0.9176136363636493, 0.9183238636363766, 0.9190340909091038, 0.9197443181818311, 0.9204545454545584, 0.9211647727272857, 0.921875000000013, 0.9225852272727403, 0.9232954545454676, 0.9247159090909222, 0.9254261363636495, 0.9261363636363767, 0.926846590909104, 0.9282670454545586, 0.9289772727272859, 0.9303977272727405, 0.9311079545454678, 0.9318181818181951, 0.9325284090909224, 0.933948863636377, 0.9346590909091043, 0.9353693181818316, 0.9367897727272861, 0.9375000000000134, 0.938920454545468, 0.9396306818181953, 0.9403409090909226, 0.9410511363636499, 0.9417613636363772, 0.9431818181818318, 0.9438920454545591, 0.9446022727272864, 0.9453125000000135, 0.9460227272727408, 0.9467329545454681, 0.9481534090909227, 0.9495738636363773, 0.9502840909091046, 0.9509943181818319, 0.9517045454545593, 0.9524147727272866, 0.9531250000000139, 0.9538352272727412, 0.9552556818181958, 0.955965909090923, 0.9566761363636503, 0.9573863636363776, 0.9580965909091049, 0.9588068181818322, 0.9595170454545595, 0.9602272727272868, 0.9609375000000141, 0.9616477272727414, 0.963068181818196, 0.9637784090909233, 0.9644886363636506, 0.9659090909091052, 0.9666193181818324, 0.968039772727287, 0.9687500000000143, 0.9694602272727416, 0.9701704545454689, 0.9708806818181963, 0.9715909090909236, 0.9723011363636509, 0.9737215909091055, 0.9744318181818328, 0.9751420454545601, 0.9765625000000147, 0.977272727272742, 0.9779829545454692, 0.9786931818181965, 0.9794034090909238, 0.9801136363636511, 0.9808238636363784, 0.9815340909091057, 0.982244318181833, 0.9836647727272876, 0.9843750000000149, 0.9857954545454695, 0.987215909090924, 0.9900568181818333, 0.9907670454545606, 0.9914772727272879, 0.9936079545454697, 0.994318181818197, 0.9957386363636516, 0.9964488636363789, 0.9971590909091061, 0.9985795454545607, 0.999289772727288, 1.0000000000000153]

# opponents action statistics
n_opp_actions = 0
opp_act_stats = {"CALL":0, "FOLD":0, "RAISE":0}
# return the strength of a card
def card_strength(c):

    return Ranks.index(c[0])  # rank matters but suits don't matter


# SORT HAND BY RANK
def hand_sort(Hand):

    h = sorted(Hand, key=card_strength)  # sort by increasing card strength

    #r = h[::-1]   # in decreasing order
    return h


def identifyHand(Hand):
    #print('identify Hand')
    if len(Hand) == 5:

        flush = False
        fourple = False
        straight = False
        triple = False
        pairs = 0

        pairs_set = set()

        triple_set = set()

        full_set = set()
        full_set.update(Hand)

        #sort in increasing strength
        Hand = hand_sort(Hand)


        x1 = Hand[0]
        x2 = Hand[1]
        x3 = Hand[2]
        x4 = Hand[3]
        x5 = Hand[4]

        # straight
        if Ranks.index(x1[0]) == Ranks.index(x2[0])- 1 and Ranks.index(x2[0]) == Ranks.index(x3[0]) - 1 and Ranks.index(x3[0]) == Ranks.index(x4[0]) - 1 and Ranks.index(x4[0]) == Ranks.index(x5[0]) - 1:
            straight = True


        # straight with ACE at bottom
        if x1[0] == '2' and x2[0] == '3' and x3[0] == '4' and x4[0] == '5' and x5[0] == 'A':
            straight = True


        # flush
        if Suits.index(x1[1]) == Suits.index(x2[1]) and Suits.index(x2[1]) == Suits.index(x3[1]) and Suits.index(x3[1]) == Suits.index(x4[1]) and Suits.index(x4[1]) == Suits.index(x5[1]):
            flush = True


        for c1 in Hand :
            for c2 in Hand :
                if c1!=c2 :
                    for c3 in Hand :
                        if c3!=c1 and  c3!=c2 :
                            for c4 in Hand:
                                if c4!=c1 and c4!=c2 and c4!=c3:
                                    for c5 in Hand :
                                        if c5!=c1 and c5!=c2 and c5!=c3 and c5!=c4:

                                            # check for 4 of a kind
                                            if Ranks.index(c1[0])==Ranks.index(c2[0]) and Ranks.index(c2[0])==Ranks.index(c3[0]) and Ranks.index(c3[0])==Ranks.index(c4[0]):
                                                fourple = True

                                            # check for 3 of a kind
                                            elif Ranks.index(c1[0])==Ranks.index(c2[0]) and Ranks.index(c2[0])==Ranks.index(c3[0]):
                                                if c1 not in triple_set:

                                                    triple_set.add(c1)
                                                    triple_set.add(c2)
                                                    triple_set.add(c3)
                                                    triple = True


                                            # check pairs
                                            elif Ranks.index(c1[0])==Ranks.index(c2[0]) :
                                                if c1 not in  pairs_set and c1 not in triple_set and not fourple:
                                                    p = c1, c2
                                                    pairs_set.add(c1)
                                                    pairs_set.add(c2)
                                                    pairs+=1


        for c in triple_set :
            if c in pairs_set:
                pairs_set.remove(c)

        if straight and flush:
            yield dict(name='Straight Flush', rank=c1[0], set= full_set)
        elif straight:
            yield dict(name='Straight', rank=c1[0], set = full_set)
        elif flush:
            yield dict(name='Flush', rank=c1[0], set = full_set)
        elif fourple:
            yield dict(name='4 of a kind', rank=c1[0], set = pairs_set)
        elif len(triple_set) and len(pairs_set) > 0:
            yield dict(name='Full House', rank=c1[0] , set = full_set)
        elif len(triple_set):
            yield dict(name='3 of a kind', rank=c1[0] , set = triple_set)
        elif len(pairs_set) > 0 and pairs >1:
            yield dict(name='2 Pairs', rank=c1[0], set = pairs_set)
        elif len(pairs_set) > 0:
            yield dict(name='Pair', rank=c1[0], set = pairs_set)



# Print out the result
def analyseHand(Hand):

    HandCategory=list()
    functionToUse = identifyHand
    for category in functionToUse(Hand):
        HandCategory.append(category)

    return HandCategory

# compute the value of a hand
# so that we can predict the winning hand just by comparing their values
def strength(hand):

    hand = hand_sort(hand)
    # Check for any pair or triple
    anal = analyseHand(hand)
    value = 0
    max_card_value = card_strength('Ac') + 1
    pair_value = pow(max_card_value, len(hand))        #  max_card_value ^ len(hand)
    double_pair_value = pair_value + pow(max_card_value, len(hand))

    triplet_value = double_pair_value + pow(max_card_value, len(hand))

    straight_value = triplet_value + pow(max_card_value, len(hand))

    flush_value = straight_value + pow(max_card_value, len(hand))

    full_house_value = flush_value + pow(max_card_value, len(hand))

    quadruple_value = full_house_value + pow(max_card_value, len(hand))

    straight_flush_value = quadruple_value + pow(max_card_value, len(hand))


    for i in reversed(range(len(hand))):
        c = hand[i]
        value += card_strength(c) * pow(max_card_value, i)  # strongest cards matter more than second
    if len(anal) > 0:
        for combo in anal:
            if combo["name"] == COMBOS[1]:
                value += pair_value
            elif combo["name"] == COMBOS[2]:
                value += double_pair_value
            elif combo["name"] == COMBOS[3]:
                value += triplet_value
            elif combo["name"] == COMBOS[4]:
                value += straight_value
            elif combo["name"] == COMBOS[5]:
                value += flush_value
            elif combo["name"] == COMBOS[6]:
                value += full_house_value
            elif combo["name"] == COMBOS[7]:
                value += quadruple_value
            elif combo["name"] == COMBOS[8]:
                value += straight_flush_value
    return value
# update_learn the hand strength cumulative distribution
# def update_handstrength_cdf(hand):
#     new_sample = strength(hand)
#     # reconstruct
#     hand_strength_pdf = [hand_strength_cdf[0]]
#     for i in range(1,len(hand_strength_samples)):
#         hand_strength_pdf.append()
#
#
#     for i in range(len(hand_strength_samples)):
#         if hand_strength_samples[i]<= new_sample and  new_sample<= hand_strength_samples[i]:
#





# return the hand type index ; see COMBOS
def handtype(Hand):
    analyse = analyseHand(Hand)
    if len(analyse) == 0:
        print(COMBOS[0])
        return 0
    else:
        for hand_type in analyse:
            i = COMBOS.index(hand_type["name"])
            # print(COMBOS[i])
            # best cards set
            if Hand == CURRENT_HAND:
                infoAgent.bestCards = hand_type["set"]
            return i

# ESTIMATE THE PROBABILITY OF WINNING ONLY DEPENDING ON THE HAND TYPE
def p_winning() :
    global infoAgent
    p_w = 0

    n = handtype(CURRENT_HAND)
    for i in range(n+1):
        p_w += hand_probabilities[i]
    return p_w

# ESTIMATE THE PROBABILITY OF WINNING ONLY DEPENDING ON THE HAND Strength
def p_winning2() :
    p_win = 0
    sx = strength(CURRENT_HAND)
    i = 0
    while i < len(hand_strength_samples):
        if sx <= hand_strength_samples[i]:
            p_win = hand_strength_cdf[i]
            return p_win
        i +=1
    return p_win
# class pokerGames(object):
#     def __init__(self):
#         self.PlayerName = POKER_CLIENT_NAME
#         self.Chips = 0
#         self.CurrentHand = []
#         self.Ante = 0
#         self.playersCurrentBet = 0

'''
* Gets the name of the player.
* @return  The name of the player as a single word without space. <code>null</code> is not a valid answer.
'''
def queryPlayerName(_name):
    if _name is None:
        _name = POKER_CLIENT_NAME
    return _name

'''
* Modify queryOpenAction() and add your strategy here
* Called during the betting phases of the game when the player needs to decide what open
* action to choose.
* @param minimumPotAfterOpen   the total minimum amount of chips to put into the pot if the answer action is
*                              {@link BettingAnswer#ACTION_OPEN}.
* @param playersCurrentBet     the amount of chips the player has already put into the pot (dure to the forced bet).
* @param playersRemainingChips the number of chips the player has not yet put into the pot.
* @return                      An answer to the open query. The answer action must be one of
*                              {@link BettingAnswer#ACTION_OPEN}, {@link BettingAnswer#ACTION_ALLIN} or
*                              {@link BettingAnswer#ACTION_CHECK }. If the action is open, the answers
*                              amount of chips in the anser must be between <code>minimumPotAfterOpen</code>
*                              and the players total amount of chips (the amount of chips already put into
*                              pot plus the remaining amount of chips).
'''
def queryOpenAction(_minimumPotAfterOpen, _playersCurrentBet, _playersRemainingChips):
    print("Player requested to choose an opening action.")


    # if most likely to win and enough money to open with 10
    if  p_winning2()>.5 and _playersCurrentBet + _playersRemainingChips  > _minimumPotAfterOpen + 10:
        return ClientBase.BettingAnswer.ACTION_OPEN, (random.randint(0, 10) + _minimumPotAfterOpen)

    elif p_winning2()>.5 and _playersCurrentBet + _playersRemainingChips > _minimumPotAfterOpen:
        return ClientBase.BettingAnswer.ACTION_OPEN,  _minimumPotAfterOpen

    else:
        return ClientBase.BettingAnswer.ACTION_CHECK

# utility of an action = difference between the beginning and the end of the hand,  in chips

def expected_utility(action, _maximumBet, _minimumAmountToRaiseTo, _playersCurrentBet, _playersRemainingChips, p_win):
    global POT
    x_raise = 5
    # FOLD
    if action == ClientBase.BettingAnswer.ACTION_FOLD:

        print("FOLD ", -_playersCurrentBet)
        return -_playersCurrentBet

    # RAISE MINIMUM
    elif action == ClientBase.BettingAnswer.ACTION_RAISE:

        u_opp_call = p_win * (POT + _minimumAmountToRaiseTo - _playersCurrentBet) - (1-p_win) * (_playersCurrentBet +_minimumAmountToRaiseTo)
        u_opp_fold = p_win * (POT - _playersCurrentBet) - (1-p_win) * (_playersCurrentBet +_minimumAmountToRaiseTo)
        u_opp_raise= p_win * (POT + _minimumAmountToRaiseTo + x_raise - _playersCurrentBet) - (1-p_win) * (_playersCurrentBet +_minimumAmountToRaiseTo)

        if n_opp_actions>5:
            print(opp_act_stats)
            u = (opp_act_stats["CALL"] * u_opp_call + opp_act_stats["FOLD"] * u_opp_call + opp_act_stats[
                "RAISE"] * u_opp_call) / n_opp_actions
        else:
            u = u_opp_call
        print("RAISE ", u)
        return u
    # CALL
    elif action == ClientBase.BettingAnswer.ACTION_CALL:

        u_opp_call = p_win * (POT + _maximumBet - _playersCurrentBet) - (1-p_win) * (_playersCurrentBet + _maximumBet)
        u_opp_fold = p_win * (POT - _playersCurrentBet) - (1-p_win) * (_playersCurrentBet + _maximumBet)
        u_opp_raise = p_win * (POT + _maximumBet +_minimumAmountToRaiseTo - _playersCurrentBet) - (1-p_win) * (_playersCurrentBet + _maximumBet)
        if n_opp_actions > 5:
            print(opp_act_stats)
            u = (opp_act_stats["CALL"] * u_opp_call + opp_act_stats["FOLD"] * u_opp_call + opp_act_stats["RAISE"] * u_opp_call)/n_opp_actions
        else:
            u = u_opp_call
            print("CALL ", u)
        return u


    # ALL IN
    elif action == ClientBase.BettingAnswer.ACTION_ALLIN:


        print("ALLIN ", p_win * (POT+ _maximumBet - _playersCurrentBet) - (1-p_win) * (_playersCurrentBet + _playersRemainingChips)  )
        return p_win * (POT+ _maximumBet - _playersCurrentBet) - (1-p_win) * (_playersCurrentBet + _playersRemainingChips)




'''
* Modify queryCallRaiseAction() and add your strategy here
* Called during the betting phases of the game when the player needs to decide what call/raise
* action to choose.
* @param maximumBet                the maximum number of chips one player has already put into the pot.
* @param minimumAmountToRaiseTo    the minimum amount of chips to bet if the returned answer is {@link BettingAnswer#ACTION_RAISE}.
* @param playersCurrentBet         the number of chips the player has already put into the pot.
* @param playersRemainingChips     the number of chips the player has not yet put into the pot.
* @return                          An answer to the call or raise query. The answer action must be one of
*                                  {@link BettingAnswer#ACTION_FOLD}, {@link BettingAnswer#ACTION_CALL},
*                                  {@link BettingAnswer#ACTION_RAISE} or {@link BettingAnswer#ACTION_ALLIN }.
*                                  If the players number of remaining chips is less than the maximum bet and
*                                  the players current bet, the call action is not available. If the players
*                                  number of remaining chips plus the players current bet is less than the minimum
*                                  amount of chips to raise to, the raise action is not available. If the action
*                                  is raise, the answers amount of chips is the total amount of chips the player
*                                  puts into the pot and must be between <code>minimumAmountToRaiseTo</code> and
*                                  <code>playersCurrentBet+playersRemainingChips</code>.
'''


def queryCallRaiseAction(_maximumBet, _minimumAmountToRaiseTo, _playersCurrentBet, _playersRemainingChips):
    print("Player requested to choose a call/raise action.")

    MIN_TO_CALL = _maximumBet
    # REFLEX STRATEGY 1
    prob_win = p_winning2()
    prob_lose = 1 - prob_win

    # amount left
    amount_left = _playersCurrentBet + _playersRemainingChips

    print( "CHIPS LEFT", amount_left)
    print('POT ', POT)
    print(CURRENT_HAND , " p(win) ", prob_win)
    print("minimumAmountToRaiseTo ", _minimumAmountToRaiseTo)
    print("max bet :",  _maximumBet)

    utilities = list()
    actions = list()

    # compute the expected Utility of each AVAILABLE action
    actions.append(ClientBase.BettingAnswer.ACTION_FOLD)
    utilities.append(expected_utility(ClientBase.BettingAnswer.ACTION_FOLD, _maximumBet, _minimumAmountToRaiseTo, _playersCurrentBet, _playersRemainingChips, prob_win))

    # IF enough coins to RAISE Minimum

    if _playersCurrentBet + _playersRemainingChips > _minimumAmountToRaiseTo:
        actions.append(ClientBase.BettingAnswer.ACTION_RAISE)
        utilities.append(expected_utility(ClientBase.BettingAnswer.ACTION_RAISE, _maximumBet, _minimumAmountToRaiseTo, _playersCurrentBet, _playersRemainingChips, prob_win))

    # IF enough coins to CALL

    if _playersCurrentBet + _playersRemainingChips > _maximumBet:
        actions.append(ClientBase.BettingAnswer.ACTION_CALL)
        utilities.append(expected_utility(ClientBase.BettingAnswer.ACTION_CALL, _maximumBet, _minimumAmountToRaiseTo, _playersCurrentBet, _playersRemainingChips, prob_win))

    # ALLIN
    else :
        actions.append(ClientBase.BettingAnswer.ACTION_ALLIN)
        utilities.append(expected_utility(ClientBase.BettingAnswer.ACTION_ALLIN, _maximumBet, _minimumAmountToRaiseTo, _playersCurrentBet, _playersRemainingChips, prob_win))

    # the best action maximizes the expected utility


    i_max = utilities.index(max(utilities))
    # i_max = np.argmax(utilities)
    best_action = actions[i_max]
    print(" BEST ACTION ", best_action)
    if best_action == ClientBase.BettingAnswer.ACTION_RAISE:

        if _playersCurrentBet + _playersRemainingChips > _minimumAmountToRaiseTo + 10:
            return ClientBase.BettingAnswer.ACTION_RAISE, _minimumAmountToRaiseTo + random.randint(0, 10)
        else:
            return ClientBase.BettingAnswer.ACTION_RAISE, _minimumAmountToRaiseTo
    else:
        return best_action


# ALTERNATIVE THROW STRATEGies


def throw_strategy1(_hand) :

    #if HAND IS AT LEAST A 2 PAIRS , KEEP ALL
    if infoAgent.CurrentHandType>=2:
         print('NOTHING TO THROW')
         return ''

    else:
        # THROW 2 WEAKEST CARDS EXCEPT
        throw_hand = hand_sort(_hand)
        throw_string = str()
        # REMOVE the pair from the throwable card list
        if infoAgent.CurrentHandType==1:
            for c1 in throw_hand:
                for c2 in throw_hand:
                    if c1[0] == c2[0] and c1[1] != c2[1]:  # if PAIR  but not the same card
                        throw_hand.remove(c1)
                        throw_hand.remove(c2)

        throw_string = ' '.join(throw_hand[:2])
        return throw_string  # + ' '

# THROW THE N WEAKEST CARDS EXCEPT THE BEST ONES
def throw_strategy2(_hand):
    # number of THROWABLE cards
    n = 5 - len(infoAgent.bestCards)

    if n <= 0:
        # print('NOTHING TO THROW')
        return ''

    else:
        # THROW THE N WEAKEST CARDS EXCEPT THE BEST ONES
        throw_hand = hand_sort(_hand)
        throw_string = str()

        for c in infoAgent.bestCards:
            if c in throw_hand:
                throw_hand.remove(c)
            else:
                error = 1

        # join n weakest remaining cards with separator ' '
        throw_string = ' '.join(throw_hand[:n])
        return throw_string  # + ' '


'''
* Modify queryCardsToThrow() and add your strategy to throw cards
* Called during the draw phase of the game when the player is offered to throw away some
* (possibly all) of the cards on hand in exchange for new.
* @return  An array of the cards on hand that should be thrown away in exchange for new,
*          or <code>null</code> or an em arptyray to keep all cards.
* @see     #infoCardsInHand(ca.ualberta.cs.poker.Hand)
'''
def queryCardsToThrow(_hand):
    print("Requested information about what cards to throw")

    #infoAgent.CurrentHand = _hand
    CURRENT_HAND = _hand
    infoAgent.CurrentHandType = handtype(CURRENT_HAND)

    return throw_strategy1(_hand)


# InfoFunction:

'''
* Called when a new round begins.
* @param round the round number (increased for each new round).
'''
def infoNewRound(_round):
    #_nrTimeRaised = 0
    #infoAgent.CurrentHandType = handtype(infoAgent.CurrentHand)
    print('Starting Round: ' + _round ) #, infoAgent.CurrentHand, COMBOS[infoAgent.CurrentHandType])

    global POT
    POT = ANTE
    MIN_TO_CALL = 0

'''
* Called when the poker server informs that the game is completed.
'''
def infoGameOver():
    print('The game is over.')

'''
* Called when the server informs the players how many chips a player has.
* @param playerName    the name of a player.
* @param chips         the amount of chips the player has.
'''
def infoPlayerChips(_playerName, _chips):
    print('The player ' + _playerName + ' has ' + _chips + 'chips')

'''
* Called when the ante has changed.
* @param ante  the new value of the ante.
'''
def infoAnteChanged(_ante):
    print('The ante is: ' + _ante)
    ANTE = _ante

'''
* Called when a player had to do a forced bet (putting the ante in the pot).
* @param playerName    the name of the player forced to do the bet.
* @param forcedBet     the number of chips forced to bet.
'''
def infoForcedBet(_playerName, _forcedBet):
    print("Player "+ _playerName +" made a forced bet of "+ _forcedBet + " chips.")
    global POT
    POT += int(_forcedBet)


'''
* Called when a player opens a betting round.
* @param playerName        the name of the player that opens.
* @param openBet           the amount of chips the player has put into the pot.
'''
def infoPlayerOpen(_playerName, _openBet):
    print("Player "+ _playerName + " opened, has put "+ _openBet +" chips into the pot.")
    global POT
    global MIN_TO_CALL
    global ANTE
    POT += int(_openBet) - ANTE
    MIN_TO_CALL += int(_openBet )- ANTE


'''
* Called when a player checks.
* @param playerName        the name of the player that checks.
'''
def infoPlayerCheck(_playerName):
    print("Player "+ _playerName +" checked.")

'''
* Called when a player raises.
* @param playerName        the name of the player that raises.
* @param amountRaisedTo    the amount of chips the player raised to.
'''
def infoPlayerRise(_playerName, _amountRaisedTo):
    print("Player "+_playerName +" raised to "+ _amountRaisedTo+ " chips.")
    global POT
    global MIN_TO_CALL
    global ANTE
    global n_opp_actions
    POT += int(_amountRaisedTo) - ANTE
    MIN_TO_CALL += int(_amountRaisedTo )- ANTE

    # update opponent actions stats
    if _playerName != POKER_CLIENT_NAME:
        opp_act_stats["RAISE"] = opp_act_stats["RAISE"] + 1
        n_opp_actions += 1

'''
* Called when a player calls.
* @param playerName        the name of the player that calls.
'''
def infoPlayerCall(_playerName):
    print("Player "+_playerName +" called.")
    global POT
    global MIN_TO_CALL
    global ANTE
    global n_opp_actions
    print("ADD MIN TO CALL", MIN_TO_CALL)
    print("POT : ", POT)
    POT += MIN_TO_CALL
    print("POT : ", POT)

    # update opponent actions stats
    if _playerName!= POKER_CLIENT_NAME:
        opp_act_stats["CALL"] = opp_act_stats["CALL"] + 1
        n_opp_actions +=1

'''
* Called when a player folds.
* @param playerName        the name of the player that folds.
'''
def infoPlayerFold(_playerName):
    global n_opp_actions
    print("Player "+ _playerName +" folded.")
    # update opponent actions stats
    if _playerName!= POKER_CLIENT_NAME:
        opp_act_stats["FOLD"] = opp_act_stats["FOLD"] + 1
        n_opp_actions +=1

'''
* Called when a player goes all-in.
* @param playerName        the name of the player that goes all-in.
* @param allInChipCount    the amount of chips the player has in the pot and goes all-in with.
'''
def infoPlayerAllIn(_playerName, _allInChipCount):
    print("Player "+_playerName +" goes all-in with a pot of "+_allInChipCount+" chips.")

'''
* Called when a player has exchanged (thrown away and drawn new) cards.
* @param playerName        the name of the player that has exchanged cards.
* @param cardCount         the number of cards exchanged.
'''
def infoPlayerDraw(_playerName, _cardCount):
    print("Player "+ _playerName + " exchanged "+ _cardCount +" cards.")

'''
* Called during the showdown when a player shows his hand.
* @param playerName        the name of the player whose hand is shown.
* @param hand              the players hand.
'''
def infoPlayerHand(_playerName, _hand):
    print("Player "+ _playerName +" hand " + str(_hand))
    global CURRENT_HAND
    if _playerName == POKER_CLIENT_NAME:
         CURRENT_HAND = _hand
         #print("CURRENT HAND  ", CURRENT_HAND)
         infoAgent.CurrentHandType = handtype(CURRENT_HAND)
         print(COMBOS[infoAgent.CurrentHandType])





'''
* Called during the showdown when a players undisputed win is reported.
* @param playerName    the name of the player whose undisputed win is anounced.
* @param winAmount     the amount of chips the player won.
'''
def infoRoundUndisputedWin(_playerName, _winAmount):
    print("Player "+ _playerName +" won "+ _winAmount +" chips undisputed.")
    global POT
    global MIN_TO_CALL
    POT = 0
    MIN_TO_CALL = 0

'''
* Called during the showdown when a players win is reported. If a player does not win anything,
* this method is not called.
* @param playerName    the name of the player whose win is anounced.
* @param winAmount     the amount of chips the player won.
'''
def infoRoundResult(_playerName, _winAmount):
    print("Player "+ _playerName +" won " + _winAmount + " chips.")
    global POT
    global MIN_TO_CALL
    POT = 0
    MIN_TO_CALL = 0

